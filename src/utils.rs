use std::path::{Path, PathBuf};
use std::sync::Arc;
use std::sync::atomic::{AtomicBool, Ordering};
use std::time::Duration;

use strum::{Display, EnumIter, EnumString};
use teloxide::prelude::*;
use teloxide::types::{ChatId, Message, MessageId};
use tokio::fs;
use tokio::sync::mpsc;
use tokio::time::sleep;

use crate::video::ProgressInfo;

pub fn is_youtube_video_link(url: &str) -> bool {
    let url = url.trim().to_lowercase();

    let is_youtube_domain = url.starts_with("https://www.youtube.com/watch?")
        || url.starts_with("http://www.youtube.com/watch?")
        || url.starts_with("https://youtube.com/watch?")
        || url.starts_with("http://youtube.com/watch?")
        || url.starts_with("https://youtu.be/")
        || url.starts_with("http://youtu.be/");

    if !is_youtube_domain {
        return false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ v= (–¥–ª—è youtube.com/watch?v=)
    if url.contains("youtube.com/watch?") {
        return url.contains("v=") && url.find("v=").unwrap() < 100;
    }

    // –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Å—ã–ª–æ–∫ youtu.be/ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã —á—Ç–æ-—Ç–æ –ø–æ—Å–ª–µ —Å–ª—ç—à–∞
    if url.contains("youtu.be/") {
        let parts: Vec<&str> = url.split("youtu.be/").collect();
        return parts.len() == 2 && !parts[1].is_empty();
    }

    false
}

pub fn get_unique_file_id(msg: Message) -> String {
    format!("chat{}_msg{}", msg.chat.id, msg.id)
}

pub fn replace_path_keep_extension_inplace(
    original_path: &Path,
    new_dir: &str,
    new_filename: &str,
) -> PathBuf {
    let extension = original_path.extension();
    let mut result = PathBuf::from(new_dir);

    if let Some(ext) = extension {
        result.push(format!("{}.{}", new_filename, ext.to_string_lossy()));
    } else {
        result.push(new_filename);
    }

    result
}

#[derive(EnumIter, Display, EnumString, Debug, Clone, PartialEq)]
pub enum MediaFormatType {
    #[strum(to_string = "üé• –í–∏–¥–µ–æ")]
    Video,
    #[strum(to_string = "üîà –ê—É–¥–∏–æ")]
    Audio,
    #[strum(to_string = "üì∑ –ö—Ä—É–∂–æ—á–µ–∫")]
    VideoNote,
    #[strum(to_string = "üéôÔ∏è –í–æ–π—Å")]
    Voice,
}

pub async fn loading_screen_with_progress(
    bot: Bot,
    chat_id: ChatId,
    message_id: MessageId,
    should_stop: Arc<AtomicBool>,
    mut progress_receiver: mpsc::UnboundedReceiver<ProgressInfo>,
) {
    let loading_messages = [
        "üöÄ –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ...",
        "üîÑ –ï—â–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º...",
        "‚ö° –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ...",
        "üé¨ –¢–≤–æ—Ä–∏–º –º–∞–≥–∏—é...",
        "üõ†Ô∏è –†–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º...",
        "‚è≥ –¢–µ—Ä–ø–µ–Ω–∏–µ, –≤–æ–ª—à–µ–±—Å—Ç–≤–æ —Ç—Ä–µ–±—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏...",
        "üéØ –î–æ–≤–æ–¥–∏–º –¥–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–∞...",
        "üî• –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ...",
        "‚öôÔ∏è –ö—Ä—É—Ç–∏–º-–≤–µ—Ä—Ç–∏–º...",
        "üåü –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —à—Ç—Ä–∏—Ö–∏...",
        "üé™ –£—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ...",
        "üîÆ –ö–æ–ª–¥—É–µ–º –Ω–∞–¥ —Ñ–∞–π–ª–æ–º...",
    ];

    // –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∞–Ω–∏–º–∞—Ü–∏–∏
    sleep(Duration::from_secs(3)).await;

    let mut current_index = 0;
    let mut last_progress: Option<ProgressInfo> = None;

    loop {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        while let Ok(progress) = progress_receiver.try_recv() {
            last_progress = Some(progress);
        }

        if should_stop.load(Ordering::Relaxed) {
            break;
        }

        let base_message = loading_messages[current_index % loading_messages.len()];

        let message = if let Some(ref progress) = last_progress {
            if progress.percentage > 0.0 {
                let progress_bar = create_progress_bar(progress.percentage);
                let time_info = if let Some(eta) = progress.estimated_time_remaining {
                    if eta.as_secs() > 0 {
                        format!(" (–æ—Å—Ç–∞–ª–æ—Å—å ~{})", format_duration(eta))
                    } else {
                        String::new()
                    }
                } else {
                    String::new()
                };

                format!(
                    "{}\n{} {:.1}%{}",
                    base_message, progress_bar, progress.percentage, time_info
                )
            } else {
                base_message.to_string()
            }
        } else {
            base_message.to_string()
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        let _ = bot.edit_message_text(chat_id, message_id, &message).await;

        current_index += 1;
        sleep(Duration::from_secs(3)).await;
    }
}

pub async fn compression_loading_screen_with_progress(
    bot: Bot,
    chat_id: ChatId,
    message_id: MessageId,
    should_stop: Arc<AtomicBool>,
    mut progress_receiver: mpsc::UnboundedReceiver<ProgressInfo>,
) {
    let compression_messages = [
        "üîß –°–∂–∏–º–∞–µ–º –≤–∏–¥–µ–æ...",
        "üóúÔ∏è –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä...",
        "üì¶ –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –ø–æ–∫—Ä–µ–ø—á–µ...",
        "‚ö° –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–º–ø—Ä–µ—Å—Å–∏—é...",
        "üéØ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ...",
        "üîÑ –ü–µ—Ä–µ–∂–∏–º–∞–µ–º –ø–∏–∫—Å–µ–ª—ã...",
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∏—Ç—Ä–µ–π—Ç...",
        "üöÄ –î–µ–ª–∞–µ–º —Ñ–∞–π–ª –ª–µ–≥—á–µ...",
        "üåü –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ...",
        "üé™ –¢–≤–æ—Ä–∏–º —á—É–¥–µ—Å–∞ —Å–∂–∞—Ç–∏—è...",
        "üîÆ –ú–∞–≥–∏—è –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏ –≤ –¥–µ–π—Å—Ç–≤–∏–∏...",
        "üíé –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ –∞–ª–º–∞–∑ —Ä–∞–∑–º–µ—Ä–∞...",
    ];

    // –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∞–Ω–∏–º–∞—Ü–∏–∏
    sleep(Duration::from_secs(3)).await;

    let mut current_index = 0;
    let mut last_progress: Option<ProgressInfo> = None;

    loop {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        while let Ok(progress) = progress_receiver.try_recv() {
            last_progress = Some(progress);
        }

        if should_stop.load(Ordering::Relaxed) {
            break;
        }

        let base_message = compression_messages[current_index % compression_messages.len()];

        let message = if let Some(ref progress) = last_progress {
            if progress.percentage > 0.0 {
                let progress_bar = create_progress_bar(progress.percentage);
                let time_info = if let Some(eta) = progress.estimated_time_remaining {
                    if eta.as_secs() > 0 {
                        format!(" (–æ—Å—Ç–∞–ª–æ—Å—å ~{})", format_duration(eta))
                    } else {
                        String::new()
                    }
                } else {
                    String::new()
                };

                format!(
                    "{}\n{} {:.1}%{}",
                    base_message, progress_bar, progress.percentage, time_info
                )
            } else {
                base_message.to_string()
            }
        } else {
            base_message.to_string()
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        let _ = bot.edit_message_text(chat_id, message_id, &message).await;

        current_index += 1;
        sleep(Duration::from_secs(3)).await;
    }
}

fn create_progress_bar(percentage: f32) -> String {
    let filled = (percentage / 10.0) as usize;
    let empty = 10_usize.saturating_sub(filled);

    format!("[{}{}]", "‚ñà".repeat(filled), "‚ñë".repeat(empty))
}

fn format_duration(duration: Duration) -> String {
    let total_seconds = duration.as_secs();
    let minutes = total_seconds / 60;
    let seconds = total_seconds % 60;

    if minutes > 0 {
        format!("{}–º {}—Å", minutes, seconds)
    } else {
        format!("{}—Å", seconds)
    }
}

pub async fn clear_dir<P: AsRef<Path>>(dir: P) -> std::io::Result<()> {
    let mut entries = fs::read_dir(dir).await?;

    while let Some(entry) = entries.next_entry().await? {
        let path = entry.path();

        if path.is_dir() {
            fs::remove_dir_all(&path).await?;
        } else {
            fs::remove_file(&path).await?;
        }
    }

    Ok(())
}
