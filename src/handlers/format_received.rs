use std::str::FromStr;

use teloxide::{
    ApiError, RequestError,
    prelude::*,
    types::{InputFile, MaybeInaccessibleMessage, ParseMode},
};
use tokio::fs;

use crate::{
    convert::{compress_video, convert_audio, convert_video, convert_video_note},
    errors::{BotError, ConversionError, HandlerResult},
    schema::MyDialogue,
    utils::MediaFormatType,
    video::VideoInfo,
};

pub async fn format_received(
    bot: Bot,
    dialogue: MyDialogue,
    filename: String,
    query: CallbackQuery,
) -> HandlerResult {
    if let Some(s) = &query.data {
        let message = query
            .message
            .ok_or_else(|| BotError::general("Couldn't find message"))?;
        let chat_id = match message {
            MaybeInaccessibleMessage::Inaccessible(ref m) => m.chat.id,
            MaybeInaccessibleMessage::Regular(ref m) => m.chat.id,
        };
        bot.answer_callback_query(&query.id).await?;
        match message {
            MaybeInaccessibleMessage::Inaccessible(m) => {
                let message = bot.send_message(m.chat.id, "–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º...").await?;
                message.id
            }
            MaybeInaccessibleMessage::Regular(m) => {
                bot.edit_message_text(chat_id, m.id, "–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º...")
                    .await?;
                m.id
            }
        };

        let media_format = MediaFormatType::from_str(s)?;
        log::info!("Found media format {:?}", media_format);

        let formated_filename_result = match media_format {
            MediaFormatType::Video => convert_video(&filename).await,
            MediaFormatType::VideoNote => {
                bot.send_message(
                    chat_id,
                    "<b>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ</b> –∫—Ä—É–∂–æ—á–µ–∫ –±—É–¥–µ—Ç –æ–±—Ä–µ–∑–∞–Ω –¥–æ 1 –º–∏–Ω—É—Ç—ã.",
                )
                .parse_mode(ParseMode::Html)
                .await?;
                convert_video_note(&filename).await
            }
            MediaFormatType::Audio | MediaFormatType::Voice => convert_audio(&filename).await,
        };

        let formated_filename = match formated_filename_result {
            Ok(f) => f,
            Err(BotError::ConversionError(e)) => {
                match e {
                    ConversionError::NonUtf8Path | ConversionError::IOError(_) => {
                        fs::remove_file(filename).await?;
                        return Err(BotError::ConversionError(e));
                    }
                    ConversionError::FfmpegFailed(exit, stderr) => {
                        log::error!("Ffmpeg error: Exit code {}, output: {}", exit, stderr);
                        fs::remove_file(filename).await?;
                        bot.send_message(chat_id,
                        "–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–µ –≤–∏–¥–µ–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç. \
                            –ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É /cancel").await?;
                        return Ok(());
                    }
                }
            }
            Err(BotError::FileTooLarge(_)) if media_format == MediaFormatType::Video => {
                // Only try compression for Video format
                bot.send_message(
                    chat_id,
                    "üîß –í–∏–¥–µ–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º (>80–ú–ë), –ø—Ä–æ–±—É–µ–º —Å–∂–∞—Ç—å...",
                )
                .await?;

                match compress_video(&filename).await {
                    Ok(compressed_file) => {
                        bot.send_message(chat_id, "‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∂–∞—Ç–æ –¥–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞!")
                            .await?;
                        compressed_file
                    }
                    Err(BotError::FileTooLarge(_)) => {
                        fs::remove_file(filename).await?;
                        bot.send_message(
                            chat_id,
                            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∂–∞—Ç—å –≤–∏–¥–µ–æ –¥–æ 80–ú–ë. \
                            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏–ª–∏ –±–æ–ª–µ–µ –Ω–∏–∑–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞."
                        ).await?;
                        return Ok(());
                    }
                    Err(e) => {
                        fs::remove_file(filename).await?;
                        return Err(e);
                    }
                }
            }
            Err(e) => {
                fs::remove_file(filename).await?;
                return Err(e);
            }
        };

        let result = match media_format {
            MediaFormatType::Video => {
                let video_info = VideoInfo::from_file(&formated_filename).await?;
                bot.send_video(chat_id, InputFile::file(&formated_filename))
                    .width(video_info.width)
                    .height(video_info.height)
                    .duration(video_info.duration as u32)
                    .await
            }
            MediaFormatType::Audio => {
                bot.send_audio(chat_id, InputFile::file(&formated_filename))
                    .await
            }
            MediaFormatType::VideoNote => {
                bot.send_video_note(chat_id, InputFile::file(&formated_filename))
                    .await
            }
            MediaFormatType::Voice => {
                bot.send_voice(chat_id, InputFile::file(&formated_filename))
                    .await
            }
        };

        match result {
            Ok(_) => {
                bot.send_message(
                    chat_id,
                    "–í–∞—à–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ! –ú–æ–∂–µ—Ç–µ —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ –≤–∏–¥–µ–æ, —á—Ç–æ–±—ã —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –µ–≥–æ."
                ).await?;
            }
            Err(RequestError::Api(ApiError::RequestEntityTooLarge)) => {
                bot.send_message(
                    chat_id,
                    "–í–∞—à–µ –≤–∏–¥–µ–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º, –º—ã –Ω–µ –º–æ–∂–µ–º –µ–≥–æ —Å–∫–∞—á–∞—Ç—å.",
                )
                .await?;
            }
            Err(e) => return Err(e.into()),
        }
        dialogue
            .exit()
            .await
            .map_err(|e| BotError::general(format!("Failed to exit dialogue: {}", e)))?;

        // Cleanup
        fs::remove_file(formated_filename).await?;
        fs::remove_file(filename).await?;
    }

    Ok(())
}
